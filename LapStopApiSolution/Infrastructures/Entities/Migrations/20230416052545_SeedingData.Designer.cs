// <auto-generated />
using System;
using Entities.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entities.Migrations
{
    [DbContext(typeof(LapStopContext))]
    [Migration("20230416052545_SeedingData")]
    partial class SeedingData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domains.Models.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Domains.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Domains.Models.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SellingPrice")
                        .HasColumnType("int");

                    b.Property<int>("SubTotal")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Domains.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Domains.Models.CustomerAccount", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActivate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Username");

                    b.HasKey("CustomerId")
                        .HasName("CustomerId");

                    b.ToTable("CustomerAccount", (string)null);
                });

            modelBuilder.Entity("Domains.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmployeeRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsMale")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeRoleId");

                    b.HasIndex("EmployeeStatusId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Domains.Models.EmployeeAccount", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActivate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Username");

                    b.HasKey("EmployeeId")
                        .HasName("EmployeeId");

                    b.ToTable("EmployeeAccount", (string)null);
                });

            modelBuilder.Entity("Domains.Models.EmployeeGallery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeGalleries");
                });

            modelBuilder.Entity("Domains.Models.EmployeeRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EmployeeRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e6d15a40-d1e1-11ed-92cb-1903471dbe5a"),
                            CreatedDate = new DateTime(2023, 4, 16, 12, 25, 44, 823, DateTimeKind.Local).AddTicks(5938),
                            IsEnable = true,
                            IsRemoved = false,
                            Name = "Admin",
                            UpdatedDate = new DateTime(2023, 4, 16, 12, 25, 44, 823, DateTimeKind.Local).AddTicks(5948)
                        },
                        new
                        {
                            Id = new Guid("e6d15a41-d1e1-11ed-92cb-1903471dbe5a"),
                            CreatedDate = new DateTime(2023, 4, 16, 12, 25, 44, 823, DateTimeKind.Local).AddTicks(5951),
                            IsEnable = true,
                            IsRemoved = false,
                            Name = "Manager",
                            UpdatedDate = new DateTime(2023, 4, 16, 12, 25, 44, 823, DateTimeKind.Local).AddTicks(5952)
                        },
                        new
                        {
                            Id = new Guid("e6d15a42-d1e1-11ed-92cb-1903471dbe5a"),
                            CreatedDate = new DateTime(2023, 4, 16, 12, 25, 44, 823, DateTimeKind.Local).AddTicks(5955),
                            IsEnable = true,
                            IsRemoved = false,
                            Name = "Staff",
                            UpdatedDate = new DateTime(2023, 4, 16, 12, 25, 44, 823, DateTimeKind.Local).AddTicks(5955)
                        });
                });

            modelBuilder.Entity("Domains.Models.EmployeeStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EmployeeStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b3d637e0-d20a-11ed-92cb-1903471dbe5a"),
                            CreatedDate = new DateTime(2023, 4, 16, 12, 25, 44, 823, DateTimeKind.Local).AddTicks(6158),
                            IsEnable = true,
                            IsRemoved = false,
                            Name = "On",
                            UpdatedDate = new DateTime(2023, 4, 16, 12, 25, 44, 823, DateTimeKind.Local).AddTicks(6159)
                        },
                        new
                        {
                            Id = new Guid("b3d637e1-d20a-11ed-92cb-1903471dbe5a"),
                            CreatedDate = new DateTime(2023, 4, 16, 12, 25, 44, 823, DateTimeKind.Local).AddTicks(6161),
                            IsEnable = true,
                            IsRemoved = false,
                            Name = "Off",
                            UpdatedDate = new DateTime(2023, 4, 16, 12, 25, 44, 823, DateTimeKind.Local).AddTicks(6162)
                        },
                        new
                        {
                            Id = new Guid("b3d637e2-d20a-11ed-92cb-1903471dbe5a"),
                            CreatedDate = new DateTime(2023, 4, 16, 12, 25, 44, 823, DateTimeKind.Local).AddTicks(6164),
                            IsEnable = true,
                            IsRemoved = false,
                            Name = "Leaving",
                            UpdatedDate = new DateTime(2023, 4, 16, 12, 25, 44, 823, DateTimeKind.Local).AddTicks(6165)
                        });
                });

            modelBuilder.Entity("Domains.Models.ExportedInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InvoiceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InvoiceStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<Guid>("SalesOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("InvoiceStatusId");

                    b.HasIndex("SalesOrderId")
                        .IsUnique();

                    b.ToTable("ExportedInvoices");
                });

            modelBuilder.Entity("Domains.Models.ExportedInvoiceDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExportedInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("ProductBarcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SellingPrice")
                        .HasColumnType("int");

                    b.Property<int>("SubTotal")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExportedInvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("ExportedInvoiceDetail");
                });

            modelBuilder.Entity("Domains.Models.ImportedInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InvoiceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InvoiceStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("InvoiceStatusId");

                    b.ToTable("ImportedInvoices");
                });

            modelBuilder.Entity("Domains.Models.ImportedInvoiceDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CostPrice")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ImportedInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("ProductBarcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SubTotal")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ImportedInvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("ImportedInvoiceDetail");
                });

            modelBuilder.Entity("Domains.Models.InvoiceStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("InvoiceStatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7187a500-d213-11ed-92cb-1903471dbe5a"),
                            CreatedDate = new DateTime(2023, 4, 16, 12, 25, 44, 823, DateTimeKind.Local).AddTicks(6244),
                            IsEnable = true,
                            IsRemoved = false,
                            Name = "Admin",
                            UpdatedDate = new DateTime(2023, 4, 16, 12, 25, 44, 823, DateTimeKind.Local).AddTicks(6245)
                        },
                        new
                        {
                            Id = new Guid("7187a501-d213-11ed-92cb-1903471dbe5a"),
                            CreatedDate = new DateTime(2023, 4, 16, 12, 25, 44, 823, DateTimeKind.Local).AddTicks(6248),
                            IsEnable = true,
                            IsRemoved = false,
                            Name = "Manager",
                            UpdatedDate = new DateTime(2023, 4, 16, 12, 25, 44, 823, DateTimeKind.Local).AddTicks(6248)
                        },
                        new
                        {
                            Id = new Guid("7187a502-d213-11ed-92cb-1903471dbe5a"),
                            CreatedDate = new DateTime(2023, 4, 16, 12, 25, 44, 823, DateTimeKind.Local).AddTicks(6250),
                            IsEnable = true,
                            IsRemoved = false,
                            Name = "Manager",
                            UpdatedDate = new DateTime(2023, 4, 16, 12, 25, 44, 823, DateTimeKind.Local).AddTicks(6251)
                        });
                });

            modelBuilder.Entity("Domains.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentPrice")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHiddenInStore")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OriginalPrice")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SellingPrice")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductStatusId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Domains.Models.ProductBrand", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductId");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BrandId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId", "BrandId");

                    b.HasIndex("BrandId");

                    b.ToTable("ProductBrand", (string)null);
                });

            modelBuilder.Entity("Domains.Models.ProductGallery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductGalleries");
                });

            modelBuilder.Entity("Domains.Models.ProductStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ProductStatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b7ee5e90-d212-11ed-92cb-1903471dbe5a"),
                            CreatedDate = new DateTime(2023, 4, 16, 12, 25, 44, 823, DateTimeKind.Local).AddTicks(6329),
                            IsEnable = true,
                            IsRemoved = false,
                            Name = "In Stock",
                            UpdatedDate = new DateTime(2023, 4, 16, 12, 25, 44, 823, DateTimeKind.Local).AddTicks(6329)
                        },
                        new
                        {
                            Id = new Guid("b7ee5e91-d212-11ed-92cb-1903471dbe5a"),
                            CreatedDate = new DateTime(2023, 4, 16, 12, 25, 44, 823, DateTimeKind.Local).AddTicks(6334),
                            IsEnable = true,
                            IsRemoved = false,
                            Name = "Out Of Stock",
                            UpdatedDate = new DateTime(2023, 4, 16, 12, 25, 44, 823, DateTimeKind.Local).AddTicks(6334)
                        },
                        new
                        {
                            Id = new Guid("b7ee5e92-d212-11ed-92cb-1903471dbe5a"),
                            CreatedDate = new DateTime(2023, 4, 16, 12, 25, 44, 823, DateTimeKind.Local).AddTicks(6336),
                            IsEnable = true,
                            IsRemoved = false,
                            Name = "Sold Out",
                            UpdatedDate = new DateTime(2023, 4, 16, 12, 25, 44, 823, DateTimeKind.Local).AddTicks(6337)
                        });
                });

            modelBuilder.Entity("Domains.Models.SalesOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SalesOrderStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalesOrderStatusId");

                    b.ToTable("SalesOrders");
                });

            modelBuilder.Entity("Domains.Models.SalesOrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("SalesOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SellingPrice")
                        .HasColumnType("int");

                    b.Property<int>("SubTotal")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("SalesOrderDetail");
                });

            modelBuilder.Entity("Domains.Models.SalesOrderStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SalesOrderStatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("feb2d310-d212-11ed-92cb-1903471dbe5a"),
                            CreatedDate = new DateTime(2023, 4, 16, 12, 25, 44, 823, DateTimeKind.Local).AddTicks(6478),
                            IsEnable = true,
                            IsRemoved = false,
                            Name = "Waiting",
                            UpdatedDate = new DateTime(2023, 4, 16, 12, 25, 44, 823, DateTimeKind.Local).AddTicks(6480)
                        },
                        new
                        {
                            Id = new Guid("feb2d311-d212-11ed-92cb-1903471dbe5a"),
                            CreatedDate = new DateTime(2023, 4, 16, 12, 25, 44, 823, DateTimeKind.Local).AddTicks(6483),
                            IsEnable = true,
                            IsRemoved = false,
                            Name = "Processing",
                            UpdatedDate = new DateTime(2023, 4, 16, 12, 25, 44, 823, DateTimeKind.Local).AddTicks(6483)
                        },
                        new
                        {
                            Id = new Guid("feb2d312-d212-11ed-92cb-1903471dbe5a"),
                            CreatedDate = new DateTime(2023, 4, 16, 12, 25, 44, 823, DateTimeKind.Local).AddTicks(6486),
                            IsEnable = true,
                            IsRemoved = false,
                            Name = "Completed",
                            UpdatedDate = new DateTime(2023, 4, 16, 12, 25, 44, 823, DateTimeKind.Local).AddTicks(6486)
                        },
                        new
                        {
                            Id = new Guid("feb2d313-d212-11ed-92cb-1903471dbe5a"),
                            CreatedDate = new DateTime(2023, 4, 16, 12, 25, 44, 823, DateTimeKind.Local).AddTicks(6489),
                            IsEnable = true,
                            IsRemoved = false,
                            Name = "Blocked",
                            UpdatedDate = new DateTime(2023, 4, 16, 12, 25, 44, 823, DateTimeKind.Local).AddTicks(6489)
                        });
                });

            modelBuilder.Entity("Domains.Models.Cart", b =>
                {
                    b.HasOne("Domains.Models.Customer", "Customer")
                        .WithOne("Cart")
                        .HasForeignKey("Domains.Models.Cart", "CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domains.Models.CartItem", b =>
                {
                    b.HasOne("Domains.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domains.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domains.Models.CustomerAccount", b =>
                {
                    b.HasOne("Domains.Models.Customer", "Customer")
                        .WithOne("CustomerAccount")
                        .HasForeignKey("Domains.Models.CustomerAccount", "CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domains.Models.Employee", b =>
                {
                    b.HasOne("Domains.Models.EmployeeRole", "EmployeeRole")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domains.Models.EmployeeStatus", "EmployeeStatus")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EmployeeRole");

                    b.Navigation("EmployeeStatus");
                });

            modelBuilder.Entity("Domains.Models.EmployeeAccount", b =>
                {
                    b.HasOne("Domains.Models.Employee", "Employee")
                        .WithOne("EmployeeAccount")
                        .HasForeignKey("Domains.Models.EmployeeAccount", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Domains.Models.EmployeeGallery", b =>
                {
                    b.HasOne("Domains.Models.Employee", "Employee")
                        .WithMany("EmployeeGalleries")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Domains.Models.ExportedInvoice", b =>
                {
                    b.HasOne("Domains.Models.Employee", "Employee")
                        .WithMany("ExportedInvoices")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domains.Models.InvoiceStatus", "InvoiceStatus")
                        .WithMany("ExportedInvoices")
                        .HasForeignKey("InvoiceStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domains.Models.SalesOrder", "SalesOrder")
                        .WithOne("ExportedInvoice")
                        .HasForeignKey("Domains.Models.ExportedInvoice", "SalesOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("InvoiceStatus");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("Domains.Models.ExportedInvoiceDetail", b =>
                {
                    b.HasOne("Domains.Models.ExportedInvoice", "ExportedInvoice")
                        .WithMany("ExportedInvoiceDetails")
                        .HasForeignKey("ExportedInvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domains.Models.Product", "Product")
                        .WithMany("ExportedInvoiceDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExportedInvoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domains.Models.ImportedInvoice", b =>
                {
                    b.HasOne("Domains.Models.Employee", "Employee")
                        .WithMany("ImportedInvoices")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domains.Models.InvoiceStatus", "InvoiceStatus")
                        .WithMany("ImportedInvoices")
                        .HasForeignKey("InvoiceStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("InvoiceStatus");
                });

            modelBuilder.Entity("Domains.Models.ImportedInvoiceDetail", b =>
                {
                    b.HasOne("Domains.Models.ImportedInvoice", "ImportedInvoice")
                        .WithMany("ImportedInvoiceDetails")
                        .HasForeignKey("ImportedInvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domains.Models.Product", "Product")
                        .WithMany("ImportedInvoiceDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ImportedInvoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domains.Models.Product", b =>
                {
                    b.HasOne("Domains.Models.ProductStatus", "ProductStatus")
                        .WithMany("Products")
                        .HasForeignKey("ProductStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductStatus");
                });

            modelBuilder.Entity("Domains.Models.ProductBrand", b =>
                {
                    b.HasOne("Domains.Models.Brand", "Brand")
                        .WithMany("ProductsOfABrand")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domains.Models.Product", "Product")
                        .WithMany("BrandsOfAProduct")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domains.Models.ProductGallery", b =>
                {
                    b.HasOne("Domains.Models.Product", "Product")
                        .WithMany("ProductGalleries")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domains.Models.SalesOrder", b =>
                {
                    b.HasOne("Domains.Models.Customer", "Customer")
                        .WithMany("SalesOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domains.Models.SalesOrderStatus", "SalesOrderStatus")
                        .WithMany("SalesOrders")
                        .HasForeignKey("SalesOrderStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("SalesOrderStatus");
                });

            modelBuilder.Entity("Domains.Models.SalesOrderDetail", b =>
                {
                    b.HasOne("Domains.Models.Product", "Product")
                        .WithMany("SalesOrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domains.Models.SalesOrder", "SalesOrder")
                        .WithMany("SalesOrderDetails")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("Domains.Models.Brand", b =>
                {
                    b.Navigation("ProductsOfABrand");
                });

            modelBuilder.Entity("Domains.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Domains.Models.Customer", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("CustomerAccount");

                    b.Navigation("SalesOrders");
                });

            modelBuilder.Entity("Domains.Models.Employee", b =>
                {
                    b.Navigation("EmployeeAccount");

                    b.Navigation("EmployeeGalleries");

                    b.Navigation("ExportedInvoices");

                    b.Navigation("ImportedInvoices");
                });

            modelBuilder.Entity("Domains.Models.EmployeeRole", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Domains.Models.EmployeeStatus", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Domains.Models.ExportedInvoice", b =>
                {
                    b.Navigation("ExportedInvoiceDetails");
                });

            modelBuilder.Entity("Domains.Models.ImportedInvoice", b =>
                {
                    b.Navigation("ImportedInvoiceDetails");
                });

            modelBuilder.Entity("Domains.Models.InvoiceStatus", b =>
                {
                    b.Navigation("ExportedInvoices");

                    b.Navigation("ImportedInvoices");
                });

            modelBuilder.Entity("Domains.Models.Product", b =>
                {
                    b.Navigation("BrandsOfAProduct");

                    b.Navigation("CartItems");

                    b.Navigation("ExportedInvoiceDetails");

                    b.Navigation("ImportedInvoiceDetails");

                    b.Navigation("ProductGalleries");

                    b.Navigation("SalesOrderDetails");
                });

            modelBuilder.Entity("Domains.Models.ProductStatus", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domains.Models.SalesOrder", b =>
                {
                    b.Navigation("ExportedInvoice");

                    b.Navigation("SalesOrderDetails");
                });

            modelBuilder.Entity("Domains.Models.SalesOrderStatus", b =>
                {
                    b.Navigation("SalesOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
